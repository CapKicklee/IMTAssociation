/*
 * Created on 1 nov. 2017 ( Time 17:24:25 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.demo.persistence.services.fake;

import java.util.List;
import java.util.Map;

import org.demo.bean.jpa.AdherentEntity;
import org.demo.persistence.commons.fake.GenericFakeService;
import org.demo.persistence.services.AdherentPersistence;

/**
 * Fake persistence service implementation ( entity "Adherent" )
 *
 * @author Telosys Tools Generator
 */
public class AdherentPersistenceFAKE extends GenericFakeService<AdherentEntity> implements AdherentPersistence {

	public AdherentPersistenceFAKE () {
		super(AdherentEntity.class);
	}
	
	protected AdherentEntity buildEntity(int index) {
		AdherentEntity entity = new AdherentEntity();
		// Init fields with mock values
		entity.setLogin( nextString() ) ;
		entity.setMdp( nextString() ) ;
		entity.setNom( nextString() ) ;
		entity.setPrenom( nextString() ) ;
		return entity ;
	}
	
	
	public boolean delete(AdherentEntity entity) {
		log("delete ( AdherentEntity : " + entity + ")" ) ;
		return true;
	}

	public boolean delete( String login ) {
		log("delete ( PK )") ;
		return true;
	}

	public void insert(AdherentEntity entity) {
		log("insert ( AdherentEntity : " + entity + ")" ) ;
	}

	public AdherentEntity load( String login ) {
		log("load ( PK )") ;
		return buildEntity(1) ; 
	}

	public List<AdherentEntity> loadAll() {
		log("loadAll()") ;
		return buildList(40) ;
	}

	public List<AdherentEntity> loadByNamedQuery(String queryName) {
		log("loadByNamedQuery ( '" + queryName + "' )") ;
		return buildList(20) ;
	}

	public List<AdherentEntity> loadByNamedQuery(String queryName, Map<String, Object> queryParameters) {
		log("loadByNamedQuery ( '" + queryName + "', parameters )") ;
		return buildList(10) ;
	}

	public AdherentEntity save(AdherentEntity entity) {
		log("insert ( AdherentEntity : " + entity + ")" ) ;
		return entity;
	}

	public List<AdherentEntity> search(Map<String, Object> criteria) {
		log("search (criteria)" ) ;
		return buildList(15) ;
	}

	@Override
	public long countAll() {
		return 0 ;
	}

}
