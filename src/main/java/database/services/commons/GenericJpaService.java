/*
 * Created on 1 nov. 2017 ( Date ISO 2017-11-01 - Time 17:25:42 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package database.services.commons;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.persistence.criteria.Predicate;

import database.services.persistenceJPA.PersistenceConfig;

/**
 * Generic JPA service operations <br>
 * Provided by Telosys Tools for JPA testing
 * 
 * @param <T>    Entity type
 * @param <PK>   Primary key type
 */
@SuppressWarnings("unchecked")
public abstract class GenericJpaService<T, PK extends java.io.Serializable> {

	private static final boolean TRANSACTIONAL = true ;
	
	private static final Predicate[] VOID_PREDICATE_ARRAY = {};
	
	/**
	 * The class of the entity managed by the concrete service
	 */
	private final Class<T> persistentClass;

	/**
	 * Constructor
	 * @param persistentClass
	 */
	public GenericJpaService(final Class<T> persistentClass) {
		this.persistentClass = persistentClass;
	}
	
	/**
	 * Executes a NON TRANSACTIONAL JPA operation with a specific EntityManager <br>
	 * ( created at the beginning of the execution and closed at the end )
	 * 
	 * @param operation the operation to be executed
	 * @return result
	 * @throws PersistenceException
	 */
	protected final Object execute(JpaOperation operation) throws PersistenceException {
		return execute(operation, false) ;
	}

	/**
	 * Executes a JPA operation ( TRANSACTIONAL or NOT ) with a specific EntityManager <br>
	 * ( created at the beginning of the execution and closed at the end )
	 * 
	 * @param operation the operation to be executed
	 * @param transactional true for a TRANSACTIONAL operation, false for NOT TRANSACTIONAL  
	 * @return result
	 * @throws PersistenceException
	 */
	protected final Object execute(JpaOperation operation, boolean transactional) throws PersistenceException {
		JpaEnvironment jpaEnvironment = JpaEnvironments.getInstance().getJpaEnvironment(PersistenceConfig.JPA_PERSISTENCE_UNIT_NAME);
		if ( transactional ) {
			return jpaEnvironment.executeWithTransaction(operation) ;
		}
		else {
			return jpaEnvironment.executeWithoutTransaction(operation) ;
			
		}
	}
	
	/**
	 * Find entity by Primary Key
	 * @param primaryKey
	 * @return
	 */
	public T load(final PK primaryKey) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				return em.find(persistentClass, primaryKey);
			}
		} ;
		// JPA operation execution 
		return (T) execute(operation) ;
	}

	/**
	 * Load all entities
	 * @param <T>
	 * @param query
	 * @return
	 */
	public List<T> loadAll() {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				final Query query = em.createQuery("from " + persistentClass.getName());
				return query.getResultList();
			}
		} ;
		// JPA operation execution 
		return (List<T>) execute(operation) ;
	}

	/**
	 * Insert entity ( TRANSACTIONAL )
	 * @param <T>
	 * @return
	 */
	public void insert(final T entity) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				em.persist(entity);
				return null;
			}
		} ;
		// JPA operation execution 
		execute(operation, TRANSACTIONAL) ;
	}

	/**
	 * Save the given entity ( TRANSACTIONAL )
	 * @param <T>
	 * @param entity
	 * @return
	 */
	public T save(final T entityToSave) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				T managedEntity = em.merge(entityToSave);
				return managedEntity;
			}
		} ;
		// JPA operation execution 
		return (T) execute(operation, TRANSACTIONAL) ;
	}
	
	/**
	 * Delete entity by primary key ( TRANSACTIONAL )
	 * @param primaryKey
	 */
	public boolean delete(final PK primaryKey) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				final T entity = em.find(persistentClass, primaryKey);
				if (entity != null) {
					em.remove(entity);
					return Boolean.TRUE ;
				}
				else {
					return Boolean.FALSE ;
				}
			}
		} ;
		// JPA operation execution 
		Boolean b = (Boolean) execute(operation, TRANSACTIONAL) ;
		return b.booleanValue();
	}
}
